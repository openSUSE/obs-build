#################################################################
#
# helm specific functions.
#
################################################################
#
# Copyright (c) 2017 SUSE Linux Products GmbH
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program (see the file COPYING); if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
#
################################################################

helm_STARTED=

recipe_setup_helm() {
    mkdir -p "$BUILD_ROOT$TOPDIR/SOURCES"
    if test "$MYSRCDIR" = $BUILD_ROOT/.build-srcdir ; then
        mv "$MYSRCDIR"/* $BUILD_ROOT$TOPDIR/SOURCES/
    else
        if test -z "$LINKSOURCES" ; then
            cp -dLR "$MYSRCDIR"/* $BUILD_ROOT$TOPDIR/SOURCES/
        else
            cp -lR "$MYSRCDIR"/* $BUILD_ROOT$TOPDIR/SOURCES/
        fi
        if test "$?" != 0 ; then
            cleanup_and_exit 1 "source copy failed"
        fi
    fi
}

recipe_prepare_helm() {
    :
}

# Variables:
# $BUILD_ROOT is the chroot
# $TOPDIR/SOURCES includes the helm sources
# $RECIPEFILE the name of the helmfile

recipe_build_helm() {
    mkdir -p "$BUILD_ROOT$TOPDIR/HELM"
    sha=`cat chart.tar | sha256sum | cut -d' ' -f1`
    cp chart.tar "$BUILD_ROOT$TOPDIR/HELM/sha256:$sha"
    tar -xf chart.tar -C "$BUILD_ROOT$TOPDIR/SOURCES" .
    #chartname=`grep "^name: " "$BUILD_ROOT$TOPDIR/SOURCES/Chart.yaml"   | cut -d' ' -f2`
    #
    perl -I$BUILD_DIR -MBuild::Helm -e Build::Helm::makeconfigjson "$BUILD_ROOT$TOPDIR/SOURCES/Chart.yaml" > config.json
    configsha=`cat config.json | sha256sum | cut -d' ' -f1`
    cp config.json "$BUILD_ROOT$TOPDIR/HELM/sha256:$configsha.json"

    chartname=`perl -I$BUILD_DIR -MBuild::Helm -e Build::Helm::chartdetails "$BUILD_ROOT$TOPDIR/SOURCES/Chart.yaml" | grep name | cut -d ':' -f2`
    chartversion=`perl -I$BUILD_DIR -MBuild::Helm -e Build::Helm::chartdetails "$BUILD_ROOT$TOPDIR/SOURCES/Chart.yaml" | grep version | cut -d ':' -f2`

    perl -I$BUILD_DIR -MBuild::Helm -e Build::Helm::makemanifestjson "sha256:$configsha.json" "$chartname:$chartversion" "sha256:$sha"
    perl -I$BUILD_DIR -MBuild::Helm -e Build::Helm::makemanifestjson "sha256:$configsha.json" "$chartname:$chartversion" "sha256:$sha"  > "$BUILD_ROOT$TOPDIR/HELM/manifest.json"

    tar -cf "$BUILD_ROOT$TOPDIR/HELM/$chartname.tar" -C "$BUILD_ROOT$TOPDIR/HELM/" "sha256:$sha" "sha256:$configsha.json" manifest.json

    perl -I$BUILD_DIR -MBuild::Helm -e Build::Helm::makecontainerinfo "$chartname.tar" "$chartname:$chartversion" "$chartversion"
    perl -I$BUILD_DIR -MBuild::Helm -e Build::Helm::makecontainerinfo "$chartname.tar" "$chartname:$chartversion" "$chartversion" > "$BUILD_ROOT$TOPDIR/HELM/$chartname.containerinfo"

    BUILD_SUCCEEDED=true
}

recipe_resultdirs_helm() {
    echo HELM
}

recipe_cleanup_helm() {
    :
}

# Local Variables:
# mode: Shell-script
# End:
