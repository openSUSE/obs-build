################################################################
#
# Copyright (c) 1995-2014 SUSE Linux Products GmbH
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program (see the file COPYING); if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
#
################################################################

recipe_setup_simpleimage() {
    TOPDIR=/usr/src/packages
    rm -rf "$BUILD_ROOT$TOPDIR"
    for i in OTHER SOURCES LIVEBUILD_ROOT ; do
        mkdir -p "$BUILD_ROOT$TOPDIR/$i"
    done
    chown -R "$ABUILD_UID:$ABUILD_GID" "$BUILD_ROOT$TOPDIR"
    if test "$MYSRCDIR" = $BUILD_ROOT/.build-srcdir ; then
        mv "$MYSRCDIR"/* $BUILD_ROOT$TOPDIR/SOURCES/
    else
        cp -p "$MYSRCDIR"/* $BUILD_ROOT$TOPDIR/SOURCES/
    fi
}

recipe_prepare_simpleimage() {
    BUILD_USER="root"
}

recipe_build_simpleimage() {
    TOPDIR=/usr/src/packages

    echo "`date -u`: creating simple image..."
    cd $BUILD_ROOT || cleanup_and_exit 1
    export SRCDIR="$TOPDIR/SOURCES"

    # Allow setting custom values through simpleimage recipe
    # (otherwise use e.g. config for the obsworker), valid
    # values are "no" (to disable the archive type), and
    # anything else to try building it.
    # TODO: Enforce presence of rpmspec and use it to parse
    # the recipe file (consider %if et al better than sed)!
    # https://wiki.merproject.org/wiki/Packaging_guidelines/ParsingSpecFiles
    PREFER_OBS_SIMPLEIMAGE_TARBALL="`sed -n 's|^#@#OBS_SIMPLEIMAGE_TARBALL=||p' $BUILD_ROOT$TOPDIR/SOURCES/simpleimage | tail -1`" || PREFER_OBS_SIMPLEIMAGE_TARBALL=""
    [ -n "$OBS_SIMPLEIMAGE_TARBALL" ] || OBS_SIMPLEIMAGE_TARBALL="$PREFER_OBS_SIMPLEIMAGE_TARBALL"
    PREFER_OBS_SIMPLEIMAGE_SQUASHFS="`sed -n 's|^#@#OBS_SIMPLEIMAGE_SQUASHFS=||p' $BUILD_ROOT$TOPDIR/SOURCES/simpleimage | tail -1`" || PREFER_OBS_SIMPLEIMAGE_SQUASHFS=""
    [ -n "$OBS_SIMPLEIMAGE_SQUASHFS" ] || OBS_SIMPLEIMAGE_SQUASHFS="$PREFER_OBS_SIMPLEIMAGE_SQUASHFS"

    if [ "$OBS_SIMPLEIMAGE_TARBALL" = no ] && [ "$OBS_SIMPLEIMAGE_SQUASHFS" = no ] ; then
        echo "FATAL: Both tarball and squashfs outputs are disabled, nothing to do" >&2
        cleanup_and_exit 1
    fi

    NAME="`sed -n 's|Name:[[:blank:]]*||p' $BUILD_ROOT$TOPDIR/SOURCES/simpleimage | tail -1`"
    [ -n "$NAME" ] || NAME="simpleimage"
    VERSION="`sed -n 's|Version:[[:blank:]]*||p' $BUILD_ROOT$TOPDIR/SOURCES/simpleimage | tail -1`"
    [ -n "$VERSION" ] || VERSION="`date -u +%y.%m.%d-%H.%M.%S`"

    SHELL="/bin/sh"
    [ -x $BUILD_ROOT/bin/bash ] && SHELL="/bin/bash"
    if [ "`grep '^%build$' $BUILD_ROOT$TOPDIR/SOURCES/simpleimage`" ]; then
      echo "`date -u`: Running integration script..."
      sed -n '/%build/,$ p' $BUILD_ROOT$TOPDIR/SOURCES/simpleimage | tail -n +2 | chroot $BUILD_ROOT $SHELL -x || cleanup_and_exit 1
      echo "`date -u`: Integration script finished."
    fi

    echo "`date -u`: Finalizing filesystem tree..."
    TOPDIRS=
    MKTOPDIRS="proc sys"
    MKTOPDIRS_TMP=".tmp/proc .tmp/sys"
    for DIR  in .* * ; do
      case "$DIR" in
	.|..) continue ;;
	.build*) continue ;;
	.nfs*) continue ;;
	.simpleimage*) continue ;;
	.preinstallimage*) continue ;;
	.preinstall_image*) continue ;;
	.srcfiles*) continue ;;
	.oldroot*) continue ;;
	.pkgs) continue ;;
	.rpm-cache) continue ;;
	.tmp) continue ;;
	installed-pkg) continue ;;
	debian-binary) continue ;;
	proc|sys) continue ;;
	run|var/run|tmp|var/tmp)
		if test -d "$DIR" && ! test -L "$DIR" ; then
			MKTOPDIRS="$MKTOPDIRS $DIR"
			MKTOPDIRS_TMP="$MKTOPDIRS_TMP .tmp/$DIR"
			continue
		fi
		# non-directories or symlinks to whatever go "as is"
		;;
      esac
      TOPDIRS="$TOPDIRS $DIR"
    done
    REMOTE_IO_EXEC rm -rf "$BUILD_ROOT$TOPDIR"
    mkdir -p $MKTOPDIRS_TMP
    for DIR in $MKTOPDIRS ; do
        if [ -e "$DIR" ] ; then
            chmod --reference="$DIR" ".tmp/$DIR" || true
            chown --reference="$DIR" ".tmp/$DIR" || true
        fi
    done
#    ( mkdir -p .tmp/ && cd .tmp/ && mkdir -p $MKTOPDIRS )
#    mkdir -p .tmp/{proc,sys}

    if [ -n "$REMOTE_IO_EXEC" ]; then
        echo "`date -u`: Compresing the final image using REMOTE_IO_EXEC, this can take a while..."
    else
        echo "`date -u`: Compresing the final image, this can take a while..."
    fi
    echo

    if [ "$OBS_SIMPLEIMAGE_TARBALL" != no ] ; then
        TAR="tar"
        TARGZIP_FLAG="-z"
        TARGZIP_POST=""
        if REMOTE_IO_EXEC test -x /usr/bin/bsdtar; then
            TAR="/usr/bin/bsdtar --format gnutar --chroot"
            if REMOTE_IO_EXEC test -x /usr/bin/pigz; then
                TARGZIP_FLAG=""
                TARGZIP_POST="| /usr/bin/pigz"
            fi
        else
            if REMOTE_IO_EXEC test -x /usr/bin/pigz; then
                TARGZIP_FLAG="-I/usr/bin/pigz"
            fi
        fi

        echo "Creating tarball image..."
        if ! REMOTE_IO_EXEC "$TAR $TARGZIP_FLAG -cf - --one-file-system $TOPDIRS -C .tmp $MKTOPDIRS $TARGZIP_POST > $BUILD_ROOT/.simpleimage.tar.gz"; then
            cleanup_and_exit 1
        fi
    fi

    if [ "$OBS_SIMPLEIMAGE_SQUASHFS" != no ] ; then
        if [ -x "`REMOTE_IO_EXEC which mksquashfs 2> /dev/null`" ]; then
            echo
            if [ "$OBS_SIMPLEIMAGE_TARBALL" != no ] ; then
                echo "Tarball done, creating squashfs image as well..."
            else
                echo "Creating squashfs image..."
            fi
            if [ -n "$REMOTE_IO_EXEC" ]; then
                echo "Using REMOTE_IO_EXEC..."
            fi
            echo
            # Note: no pigz magic here, mksquashfs already does parallel work by itself
            REMOTE_IO_EXEC mksquashfs $TOPDIRS $MKTOPDIRS_TMP $BUILD_ROOT/.simpleimage.squashfs -info -keep-as-directory -no-progress || cleanup_and_exit 1
        else
            if [ "$OBS_SIMPLEIMAGE_TARBALL" = no ] ; then
                echo "FATAL: Tarball output was disabled, and mksquashfs is not found, nothing to do" >&2
                cleanup_and_exit 1
            fi
        fi
    fi
    echo "`date -u`: simple image created."

    DEST="$BUILD_ROOT$TOPDIR/OTHER"
    mkdir -p "$DEST"

    if [ "$OBS_SIMPLEIMAGE_TARBALL" != no ] ; then
        if [ -r .simpleimage.tar.gz ]; then
            echo
            echo "Renaming to final unique name and checksumming the tarball image..."
            echo
            mv $BUILD_ROOT/.simpleimage.tar.gz $DEST/$NAME-${VERSION}_${BUILD_ARCH%%:*}.tar.gz
            REMOTE_IO_EXEC md5sum $DEST/$NAME-${VERSION}_${BUILD_ARCH%%:*}.tar.gz | sed "s|$DEST/||" > $DEST/$NAME-${VERSION}_${BUILD_ARCH%%:*}.tar.gz.md5
            ls -la $DEST/$NAME-${VERSION}_${BUILD_ARCH%%:*}.tar.gz.md5 $DEST/$NAME-${VERSION}_${BUILD_ARCH%%:*}.tar.gz
        fi
    fi

    if [ "$OBS_SIMPLEIMAGE_SQUASHFS" != no ] ; then
        if [ -r .simpleimage.squashfs ]; then
            echo
            echo "Renaming to final unique name and checksumming the squashfs image..."
            echo
            mv $BUILD_ROOT/.simpleimage.squashfs $DEST/$NAME-${VERSION}_${BUILD_ARCH%%:*}.squashfs
            REMOTE_IO_EXEC md5sum $DEST/$NAME-${VERSION}_${BUILD_ARCH%%:*}.squashfs | sed "s|$DEST/||" > $DEST/$NAME-${VERSION}_${BUILD_ARCH%%:*}.squashfs.md5
            ls -la $DEST/$NAME-${VERSION}_${BUILD_ARCH%%:*}.squashfs.md5 $DEST/$NAME-${VERSION}_${BUILD_ARCH%%:*}.squashfs
        fi
    fi

    echo "Almost done, cleaning up..."
    rm -f $BUILD_ROOT/.build.packages
    ln -s ${TOPDIR#/} $BUILD_ROOT/.build.packages

    echo "`date -u`: recipe_build_simpleimage() finished"
    test -d "$SRCDIR" && cd "$SRCDIR" || echo "NOTE: Could not test existance of SRCDIR='$SRCDIR'"

    echo
    echo "$HOST finished \"build $RECIPEFILE\" at `date --utc`."
    echo

    cleanup_and_exit
}

recipe_resultdirs_simpleimage() {
    :
}

recipe_cleanup_simpleimage() {
    :
}

