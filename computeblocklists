#!/usr/bin/perl -w
# compute the blocks used by a file
# usage:
# computeblocklists [options] <files...>
# options:
# --padstart NUM, --padend NUM, --verbose
#
# output:
# <file base name> <size> <blocksize> <block numbers...>
#
# a block is either a number or a range (start-end)
#

################################################################
#
# Copyright (c) 1995-2014 SUSE Linux Products GmbH
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 or 3 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program (see the file COPYING); if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
#
################################################################

use strict;
use Math::BigInt;

# powerpc, mips, sparc, and alpha have 3 direction bits
# and represent _IOC_NONE as 1 instead of 0.
sub alt_ioctl($)
{
	my ($ioctl_nr) = @_;
	my $size = ($ioctl_nr >> 16) & 0x3fff;
	my $dir = ($ioctl_nr >> 30);
	my $base = $ioctl_nr & 0x1fffffff;

	die "invalid size $size" if ($size > (1 << 13));

	return $base | ($dir + 1) << 29;
}

#
# Use FIBMAP to gather block lists, block-by-block
# This is the older, slower way to iterate over file extents but
# will generally work on older kernels.
#
sub fibmap_blocklist($$$) {
  my ($fd, $st_size, $bsize) = @_;

  my $blocks = int(($st_size+$bsize-1)/$bsize);
  my ($firstblock, $lastblock);
  for ($b = 0; $b < $blocks; ++$b) {
    my $block = pack('I', $b);
    my $FIBMAP = 1;
    if (not defined ioctl($fd, 1, $block)) {
      if (not defined ioctl($fd, alt_ioctl($FIBMAP), $block)) {
	die("fibmap ioctl: $!\n");
      }
    }
    $block = unpack('I', $block);
    if (!$firstblock && defined($firstblock)) {
      # last block was hole
      if (!$block) {
	$lastblock++;	# count holes, 0-2 means three hole blocks
      } else {
	# switch back from 'hole mode' into normal mode
	printf "-$lastblock" if defined($firstblock) && $firstblock != $lastblock;
	print " $block";
	$firstblock = $lastblock = $block;
      }
      next;
    }
    if (!$firstblock || $lastblock + 1 != $block) {
      # start of a new run
      printf "-$lastblock" if defined($firstblock) && $firstblock != $lastblock;
      print " $block";
      $firstblock = $block;
    }
    $lastblock = $block;
  }
  # finish last run
  printf "-$lastblock" if defined($firstblock) && $firstblock != $lastblock;
}

sub bytes_in_blocks($$) {
  my ($bytes, $bsize) = @_;
  return int(($bytes + $bsize - 1) / $bsize);
}

#
# Use the FIEMAP ioctl to gather block lists, defined extent at a time
# This is the newer way to gather extent information.  We iterate the file
# up to 50 extents at a time, each describing a contiguous, non-hole, range.
#
# see /usr/include/linux/fiemap.h for definitions of the flags used below
#
sub fiemap_blocklist($$$) {
  my ($file, $size, $blocksize) = @_;

  my $FIEMAP = 0xc020660b;
  my $offset = 0;

  while ($offset < $size) {
    my $x = pack_fiemap($offset, $size);

    if (not defined ioctl($file, $FIEMAP, $x)) {
      if (not defined ioctl($file, alt_ioctl($FIEMAP), $x)) {
	die("fiemap ioctl: $!\n");
      }
    }

    my ($flags, $count, @extents) = unpack_fiemap($x);

    $count = int($count);

    last if ($count == 0);

    my $i = 0;
    while ($i < $count) {
      my $start = $i * 9;
      my $hole;
      my @record = @extents[$start..$start+9];
      my ($logical, $physical, $length, $resv1, $resv2, $flags) = @record;
      if ($offset != $logical) {
	$hole = bytes_in_blocks($logical - $offset, $blocksize) - 1;
	print " 0-$hole";
      }
      my $first = bytes_in_blocks($physical, $blocksize);
      my $last = $first + bytes_in_blocks($length, $blocksize) - 1;
      $flags = int($flags);

      # Not a hole but for these purposes we should treat it as one
      if ($flags & 0x00000800) { # UNWRITTEN
	$hole = bytes_in_blocks($length, $blocksize) - 1;
	print " 0-$hole";
      } elsif ($flags & 0x00000008) { # ENCODED
	die "extent mapped but is encoded";
      # UNKNOWN|DELALLOC|DATA_ENCRYPTED|NOT_ALIGNED|DATA_INLINE|DATA_TAIL
      } elsif ($flags & 0x00000786) {
	die "extent cannot be block-mapped";
      } else {
	if ($first == $last) {
	  print " $first";
	} else {
	  print " $first-$last";
	}
      }
      $i += 1;
      $offset = $logical + $length;
    }
  }

  if ($offset < $size) {
    my $hole = bytes_in_blocks($size - $offset, $blocksize) - 1;
    print " 0-$hole";
  }
}

# little-endian? (if not, assume big-endian and ignore "weird" byte orders)
my $is_little = unpack('C', pack('S', 1));

# check if perl supports the "Q" type
my $has_Q_type = eval { unpack('Q', pack('Q', 1)); };

#
# Convert an unsigned quad (64-bit) value to two unsigned long (32-bit) values.
# Return (low order bits, high order bits) if little-endian byte order is
# used. Otherwise, return (high order bits, low order bits).
# Note: if the input is a Math::BigInt, the returned values are also
# Math::BigInt objects, which is no problem because a Math::BigInt can also
# passed to pack(...).
#
sub uquad_to_ulongs {
  my ($uquad) = @_;
  my $lows = $uquad & 0xffffffff;
  my $highs = ($uquad >> 32) & 0xffffffff;
  return ($highs, $lows) unless $is_little;
  return ($lows, $highs);
}

#
# Convert two unsigned long (32-bit) values to an unsigned quad (64-bit) value
# If little-endian byte order is used, $first represents the low order bits
# and $second represents the high order bits. Otherwise, $second represents
# the low order bits and $first represents the high order bits.
#
sub ulongs_to_uquad {
  my ($first, $second) = @_;
  my ($lows, $highs) = $is_little ? ($first, $second) : ($second, $first);
  my $uquad = Math::BigInt->new($highs);
  return ($uquad << 32) | $lows;
}

sub pack_fiemap {
  my ($offset, $size) = @_;
  my $flags_in = 0x00000001; # FIEMAP_FLAG_SYNC
  return pack("QQIIIx4.", $offset, $size, $flags_in, 0, 50, 4096)
    if $has_Q_type;
  my @uloffset = uquad_to_ulongs($offset);
  my @ulsize = uquad_to_ulongs($size);
  return pack("LLLLIIIx4.", @uloffset, @ulsize, $flags_in, 0, 50, 4096);
}

sub unpack_fiemap {
  my ($data) = @_;
  return unpack("x16IIx8(QQQQQIIII)[50]", $data) if $has_Q_type;
  my ($flags, $count, @extents) = unpack("x16IIx8(LLLLLLLLLLIIII)[50]", $data);
  my $i = 0;
  my @nextents;
  while ($i++ < $count) {
    my ($log1, $log2, $phy1, $phy2, $len1, $len2,
        $res0_1, $res0_2, $res1_1, $res1_2, @ints) = splice(@extents, 0, 14);
    push @nextents, ulongs_to_uquad($log1, $log2);
    push @nextents, ulongs_to_uquad($phy1, $phy2);
    push @nextents, ulongs_to_uquad($len1, $len2);
    push @nextents, ulongs_to_uquad($res0_1, $res0_2);
    push @nextents, ulongs_to_uquad($res1_1, $res1_2);
    push @nextents, @ints;
  }
  return ($flags, $count, @nextents);
}

my ($opt_padstart, $opt_padend, $opt_verbose, $opt_manifest, $opt_mani0);
$opt_verbose = 0;

while (@ARGV)  {
  if ($ARGV[0] eq '--padstart') {
    shift @ARGV;
    $opt_padstart = shift @ARGV;
    next;
  }
  if ($ARGV[0] eq '--padend') {
    shift @ARGV;
    $opt_padend = shift @ARGV;
    next;
  }
  if ($ARGV[0] eq '--verbose' || $ARGV[0] eq '-v') {
    shift @ARGV;
    $opt_verbose++;
    next;
  }
  if ($ARGV[0] eq '-0') {
    shift @ARGV;
    $opt_mani0 = 1;
    next;
  }
  if ($ARGV[0] eq '--manifest') {
    shift @ARGV;
    $opt_manifest = shift @ARGV;
    next;
  }
  last;
}

print "\n"x$opt_padstart if $opt_padstart;

if ($opt_manifest) {
  if ($opt_manifest eq '-') {
    open(MANIFEST, '<&STDIN') || die("STDIN dup: $!\n");
  } else {
    open(MANIFEST, '<', $opt_manifest) || die("$opt_manifest: $!\n");
  }
}

while (1) {
  my $file;
  if (@ARGV) {
    $file = shift @ARGV;
  } elsif ($opt_manifest) {
    if ($opt_mani0) {
      local $/ = "\0";
      $file = <MANIFEST>;
      last unless defined $file;
      $file =~ s/\0$//s;
    } else {
      $file = <MANIFEST>;
      last unless defined $file;
      chomp $file;
    }
  } else {
    last;
  }
  my $n = $file;
  $n =~ s/([\000-\037 %])/sprintf("%%%02X", ord($1))/ges;
  if (-l $file) {
    print STDERR "$file\n" if $opt_verbose && !($opt_verbose == 1 && $file =~ /^KIWI\/.*\//);
    my $c = readlink($file);
    die("$file: readlink: $!\n") unless defined $c;
    if ("/$c/" =~ /\/\.?\//s) {
      print STDERR "$file: bad symlink ($c) ignored\n";
      next;
    }
    if ("/$c/" =~ /^((?:\/\.\.)+)\/(.*?)$/s) {
      my ($head, $tail) = ($1, $2);
      if (("/$tail/" =~ /\/\.\.\//s) || (($head =~ y!/!!) > ($file =~ y!/!!))) {
        print STDERR "$file: bad symlink ($c) ignored\n";
        next;
      }
    } else {
      if ("/$c/" =~ /\/\.\.\//s) {
        print STDERR "$file: bad symlink ($c) ignored\n";
        next;
      }
    }
    $c =~ s/([\000-\037 %])/sprintf("%%%02X", ord($1))/ges;
    print "l $n $c\n";
    next;
  } elsif (-d _) {
    print STDERR "$file\n" if $opt_verbose && $opt_verbose > 1;
    print "d $n\n";
    next;
  } elsif (!-f _) {
    next;
  }
  print STDERR "$file\n" if $opt_verbose && !($opt_verbose == 1 && $file =~ /^KIWI\/.*\//);

  my $fd = undef;
  if (!open($fd, '<', $file)) {
    print STDERR "$file: $!";
    next;
  }

  my @stat = stat($fd);
  die unless @stat;
  my $st_size = $stat[7];
  if ($st_size == 0) {
    print "f $n 0\n";
    close($fd);
    next;
  }

  my $bsize = 'xxxx';
  my $FIGETBSZ = 2;
  if (not defined ioctl($fd, $FIGETBSZ, $bsize)) {
    if (not defined ioctl($fd, alt_ioctl($FIGETBSZ), $bsize)) {
      die("FIGETBSZ failed on $file: $!\n");
    }
  }
  $bsize = unpack("L", $bsize);
  die("$file: empty blocksize\n") unless $bsize != 0;

  print "f $n $st_size $bsize";

  eval { fiemap_blocklist($fd, $st_size, $bsize) };
  if ($@) {
    warn($@);
    eval { fibmap_blocklist($fd, $st_size, $bsize) };
    if ($@) {
      warn($@);
      die "Could not get block list for $n\n";
    }
  }
  print "\n";
  close($fd);
}

print "\n"x$opt_padend if $opt_padend;
