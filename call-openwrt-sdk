#!/bin/bash

export BUILD_DIR=${BUILD_DIR:-/usr/lib/build}

IS_UNSHARED=

while test -n "$1" ; do
    case "$1" in
	--root)
	    BUILD_ROOT="$2"
	    shift 2
	    ;;
	--isunshared)
	    IS_UNSHARED=true
	    shift
	    ;;
	*)
	    break
	    ;;
    esac
done

if test -z "$BUILD_ROOT" ; then
    echo "Usage: call-openwrt-sdk --root <buildroot>"
    exit 1
fi

if test -z "$IS_UNSHARED" ; then
    echo "Unsharing environment"
    # unshare mounts and network
    exec unshare -m -n $BUILD_DIR/call-openwrt-sdk --isunshared --root "$BUILD_ROOT" "$@"
    exit 1
fi

if test -n "$IS_UNSHARED" ; then
    # make mounts private
    mount --make-rprivate /
fi

if test "$BUILD_ROOT" != '/' ; then
    # make build root a mount point
    mount --rbind --make-private "$BUILD_ROOT" "$BUILD_ROOT"
    mount --make-rprivate "$BUILD_ROOT"
fi

# setup mounts
test -e "$BUILD_ROOT/proc/self" || mount -n -tproc none $BUILD_ROOT/proc

set -x

# Get the SDK
#chroot "$BUILD_ROOT" bash -c "mkdir -p sdk && curl -L $SDKURL -o sdkarchive && tar xf sdkarchive --strip-components=1 -C sdk"
# Set up the SDK
#chroot "$BUILD_ROOT" bash -c "cd sdk && ./scripts/feeds update -a"

# Set up local repository, prepare libraries
chroot "$BUILD_ROOT" bash -c "cd sdk && grep localrepo feeds.conf.default || echo \"src-link localrepo /repo/\" >> feeds.conf.default"
chroot "$BUILD_ROOT" bash -c "cd sdk && cp feeds.conf.default /usr/src/packages"
chroot "$BUILD_ROOT" bash -c "rm -f /sdk/staging_dir/host/lib/libncurses* && cp -r /sdk/staging_dir/host/lib/* /lib/"
chroot "$BUILD_ROOT" bash -c "cp -r /sdk/include /repo/$NAME/"
chroot "$BUILD_ROOT" bash -c "grep INCLUDE_DIR: /repo/$NAME/Makefile || sed 1s@^@INCLUDE_DIR:=/repo/$NAME/include/\\\\n@ -i /repo/$NAME/Makefile"

# Update index files
chroot "$BUILD_ROOT" bash -c "for f in /sdk/*; do ln -sf \$f /usr/src/packages/; done"
chroot "$BUILD_ROOT" bash -c "cd sdk && ./scripts/feeds update localrepo"

# Install local repository
chroot "$BUILD_ROOT" bash -c "cd sdk && ./scripts/feeds install $NAME"

# Set up signatures
chroot "$BUILD_ROOT" bash -c "cd sdk && ./staging_dir/host/bin/usign -G -s ./key-build -p ./key-build.pub -c localkey"

# Compile the package
chroot "$BUILD_ROOT" bash -c "cd sdk && make defconfig"
chroot "$BUILD_ROOT" bash -c "cd sdk/staging_dir/host/bin/ && mv -n fakeroot fakeroot.bak && ln -sf /usr/bin/unshare /sdk/staging_dir/host/bin/fakeroot"
chroot "$BUILD_ROOT" bash -c "cd sdk && make package/$NAME/compile V=s"
chroot "$BUILD_ROOT" bash -c "cd sdk && make package/index V=s"
